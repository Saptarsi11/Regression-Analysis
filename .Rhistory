#1
# Load required packages
library(ggplot2)
library(corrplot)
# Read the dataset
data <- read.csv("C:/Users/bhatt/Downloads/Bikedata.csv", header = TRUE)
# Encode categorical variables as dummy variables
data$Seasons <- factor(data$Seasons, levels = c("Winter", "Spring", "Summer", "Autumn"))
data$Holiday <- factor(data$Holiday, levels = c("No Holiday", "Holiday"))
# Create dummy variables for categorical variables
encoded_data <- data.frame(model.matrix(~.-1, data = data))
# Compute correlation matrix
cor_matrix <- cor(encoded_data)
# Create correlation plot
corrplot(cor_matrix, method = "color", type = "lower", tl.cex = 0.6, tl.col = "black",
addCoef.col = "black", number.cex = 0.6)
#2
# Fit the linear regression model
model <- lm(log.Rented.Bike.Count ~ Hour + Temperature + Humidity + Wind.speed + Visibility +
Solar.Radiation + Rainfall + Snowfall + SeasonsWinter + SeasonsSpring +
SeasonsSummer + HolidayHoliday, data = encoded_data)
# Print the model summary
summary(model)
#3
# Define the list of predictors
predictors <- c("Hour", "Temperature", "Humidity", "Wind.speed", "Visibility",
"Solar.Radiation", "Rainfall", "Snowfall", "SeasonsWinter",
"SeasonsSpring", "SeasonsSummer", "HolidayHoliday")
# Initialize the AIC results vector
SubSetResult <- vector()
# Iterate over different subsets of predictors
for (predictorsCounter in 1:length(predictors)) {
# Generate all combinations of predictors
allMCombn <- combn(x = predictors, m = predictorsCounter)
# Iterate over each combination
for (mCombnCounter in 1:ncol(allMCombn)) {
# Get the current combination of predictors
modelPredictors <- allMCombn[, mCombnCounter]
# Create the formula for linear regression
formula <- paste("log.Rented.Bike.Count ~", paste(modelPredictors, collapse = "+"))
# Fit the linear regression model
reg.lm <- lm(as.formula(formula), data = encoded_data)
# Calculate AIC
aic <- AIC(reg.lm)
# Store the results
SubSetResult <- rbind(SubSetResult, c(formula, round(aic, digits = 2), predictorsCounter))
}
}
# Convert the results to a data frame
SubSetResult <- as.data.frame(SubSetResult)
colnames(SubSetResult) <- c("model", "aic", "CountOfPredictors")
# Find the model with the minimum AIC
aicmin <- which.min(SubSetResult$aic)
# Print the model with the minimum AIC
print(SubSetResult[aicmin, ])
# Load required packages
library(broom)
# Fit the linear regression model with the best predictors
best_model <- lm(log.Rented.Bike.Count ~ Hour + Temperature + Humidity + Wind.speed + Rainfall +
SeasonsWinter + SeasonsSpring + SeasonsSummer + HolidayHoliday,
data = encoded_data)
# Extract the summary of the model
summary_table <- tidy(best_model)
# Print the summary table
print(summary_table)
#4
# Calculate residuals
residuals <- best_model$residuals
# Create fitted vs residual plot
plot(best_model$fitted.values, residuals, main = "Fitted vs Residuals Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, lty = 2)  # Add a reference line at y = 0
# Create a histogram of residuals
hist(residuals, main = "Residuals Histogram", xlab = "Residuals")
# Create a Q-Q plot of residuals
qqnorm(residuals, main = "Q-Q Plot of Residuals")
qqline(residuals)
# Calculate variance inflation factor (VIF)
vif <- car::vif(best_model)
# Print VIF values
print(vif)
